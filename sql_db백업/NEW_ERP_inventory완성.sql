-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- 생성 시간: 24-08-10 21:54
-- 서버 버전: 10.3.32-MariaDB
-- PHP 버전: 8.0.23

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- 데이터베이스: `NEW_ERP`
--

-- --------------------------------------------------------

--
-- 테이블 구조 `ACCOUNT`
--

CREATE TABLE `ACCOUNT` (
  `NO` int(10) NOT NULL,
  `EMAIL` varchar(30) NOT NULL,
  `NAME` varchar(30) NOT NULL,
  `PASSWORD` varchar(30) DEFAULT NULL,
  `ROLE` varchar(20) NOT NULL DEFAULT '사원',
  `POSITION` varchar(20) NOT NULL DEFAULT '사원',
  `CREATE_DATE` date NOT NULL DEFAULT current_timestamp(),
  `ACCOUNT_STATE` int(11) NOT NULL DEFAULT 1 COMMENT '사용자 상태',
  `LEVEL` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `ACCOUNT`
--

INSERT INTO `ACCOUNT` (`NO`, `EMAIL`, `NAME`, `PASSWORD`, `ROLE`, `POSITION`, `CREATE_DATE`, `ACCOUNT_STATE`, `LEVEL`) VALUES
(1, 'ADMIN', 'ADMIN', '1', '관리자', 'ADMIN', '2024-05-14', 1, 100),
(2, 'tera@email.com', 'tera', '1', '읽기', '사원', '2024-05-22', 1, 10),
(3, 'tera', 'TERA', '1', '읽기', '사원', '2024-05-28', 1, 1),
(1, 'ADMIN', 'ADMIN', '1', '관리자', 'ADMIN', '2024-05-14', 1, 100),
(2, 'tera@email.com', 'tera', '1', '읽기', '사원', '2024-05-22', 1, 10),
(3, 'tera', 'TERA', '1', '읽기', '사원', '2024-05-28', 1, 1);

-- --------------------------------------------------------

--
-- 테이블 구조 `BARCODE_COUNT`
--

CREATE TABLE `BARCODE_COUNT` (
  `NO` int(11) NOT NULL,
  `PRODUCT_CODE` varchar(30) NOT NULL,
  `PRODUCT_CODE_REV` varchar(2) DEFAULT NULL,
  `LAST_SERIAL_NUMBER` int(10) DEFAULT NULL,
  `BARCODE_COUNT` varchar(10) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `BARCODE_COUNT`
--

INSERT INTO `BARCODE_COUNT` (`NO`, `PRODUCT_CODE`, `PRODUCT_CODE_REV`, `LAST_SERIAL_NUMBER`, `BARCODE_COUNT`) VALUES
(26, 'KAAL230010K00240807', NULL, 32, '0'),
(45, 'KABL230011K%2001240807', NULL, 3, '0'),
(46, 'KACL230090K%2000240807', NULL, 4, '0'),
(48, 'KAAL230090K01240807', NULL, 2, '0'),
(49, 'KACL231050K%2002240807', NULL, 5, '0'),
(50, 'KAAL230110K%2000240807', NULL, 1, '0'),
(52, 'KAAL230010K00240808', NULL, 1, '0'),
(53, 'KAAL230010K00240809', NULL, 2, '0');

-- --------------------------------------------------------

--
-- 테이블 구조 `DELIVERY`
--

CREATE TABLE `DELIVERY` (
  `NO` int(11) NOT NULL,
  `PRODUCT_NO` int(10) NOT NULL,
  `PRODUCT_CODE` varchar(30) DEFAULT NULL,
  `PRODUCT_FULLNAME` varchar(50) DEFAULT NULL,
  `COUNT` int(10) NOT NULL,
  `DATE` date NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `DELIVERY`
--

INSERT INTO `DELIVERY` (`NO`, `PRODUCT_NO`, `PRODUCT_CODE`, `PRODUCT_FULLNAME`, `COUNT`, `DATE`) VALUES
(1, 1, 'KAAL230007K', 'DAB FOLDING [VF33/VN]', 50, '2024-08-05'),
(2, 2, 'KAAL230007K-1', 'DAB FOLDING [VF34/VN]', 50, '2024-08-05'),
(3, 4, 'KAAL230020K', 'DAB FOLDING [VF35/VN&EU]', 50, '2024-08-06'),
(4, 5, 'KAAL230060K', 'DAB FOLDING [VF35/US]', 50, '2024-08-06'),
(5, 7, 'KABL230000K', 'PAB FOLDING [VF35/US]', 50, '2024-08-06'),
(6, 8, 'KABL230080K', 'PAB FOLDING [VF33/VN&EU]', 50, '2024-08-07');

--
-- 트리거 `DELIVERY`
--
DELIMITER $$
CREATE TRIGGER `after_delivery_delete` AFTER DELETE ON `DELIVERY` FOR EACH ROW BEGIN
  -- INVENTORY 테이블에 해당 PRODUCT_NO가 있는지 확인
  IF EXISTS (SELECT * FROM INVENTORY WHERE PRODUCT_NO = OLD.PRODUCT_NO) THEN
    -- SUM_COUNT 값을 증가시킴
    UPDATE INVENTORY
    SET SUM_COUNT = SUM_COUNT + OLD.COUNT, DATE = current_timestamp()
    WHERE PRODUCT_NO = OLD.PRODUCT_NO;
  ELSE
    -- INVENTORY 테이블에 해당 PRODUCT_NO가 없다면 새 항목을 추가
    INSERT INTO INVENTORY (PRODUCT_NO, SUM_COUNT, DATE)
    VALUES (OLD.PRODUCT_NO, OLD.COUNT, current_timestamp());
  END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `after_delivery_insert` AFTER INSERT ON `DELIVERY` FOR EACH ROW BEGIN
  -- INVENTORY 테이블에 해당 PRODUCT_NO가 있는지 확인
  IF EXISTS (SELECT * FROM INVENTORY WHERE PRODUCT_NO = NEW.PRODUCT_NO) THEN
    -- SUM_COUNT 값을 감소시킴
    UPDATE INVENTORY
    SET SUM_COUNT = SUM_COUNT - NEW.COUNT, DATE = current_timestamp()
    WHERE PRODUCT_NO = NEW.PRODUCT_NO;
    
    -- SUM_COUNT가 0보다 작아지면 해당 항목을 삭제
    DELETE FROM INVENTORY
    WHERE PRODUCT_NO = NEW.PRODUCT_NO AND SUM_COUNT <= 0;
  END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- 테이블 구조 `INVENTORY`
--

CREATE TABLE `INVENTORY` (
  `NO` int(11) NOT NULL,
  `PRODUCT_NO` int(11) NOT NULL,
  `SUM_COUNT` int(11) NOT NULL,
  `DATE` date DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `INVENTORY`
--

INSERT INTO `INVENTORY` (`NO`, `PRODUCT_NO`, `SUM_COUNT`, `DATE`) VALUES
(1, 1, 950, '2024-08-10'),
(2, 2, 650, '2024-08-10'),
(3, 3, 402, '2024-08-10'),
(4, 4, 552, '2024-08-10'),
(5, 5, 350, '2024-08-10'),
(6, 7, 1150, '2024-08-10'),
(7, 8, 1810, '2024-08-10'),
(8, 10, 662, '2024-08-10'),
(9, 11, 400, '2024-08-10'),
(10, 12, 400, '2024-08-10'),
(11, 13, 800, '2024-08-10'),
(12, 14, 600, '2024-08-10'),
(13, 15, 500, '2024-08-10'),
(14, 16, 1000, '2024-08-10'),
(15, 17, 500, '2024-08-10'),
(16, 18, 500, '2024-08-10'),
(17, 19, 500, '2024-08-10'),
(18, 6, 200, '2024-08-10');

-- --------------------------------------------------------

--
-- 테이블 구조 `PRODUCTS`
--

CREATE TABLE `PRODUCTS` (
  `NO` int(11) NOT NULL,
  `PRODUCT_CODE` varchar(50) DEFAULT NULL,
  `CAR` varchar(30) DEFAULT NULL,
  `LOCATION` varchar(30) NOT NULL,
  `COMPANY` varchar(30) DEFAULT NULL,
  `PRODUCT_NAME` varchar(50) DEFAULT NULL,
  `PRODUCT_BARCODE` varchar(50) DEFAULT NULL,
  `BARCODE_NO` varchar(30) DEFAULT NULL,
  `BARCODE_REV` varchar(30) DEFAULT NULL,
  `PRODUCT_CODE_NAME` varchar(30) NOT NULL,
  `PRODUCT_PART01` varchar(30) NOT NULL,
  `PRODUCT_FULLNAME` varchar(50) NOT NULL,
  `PRODUCT_DESC01` varchar(30) NOT NULL,
  `PRODUCT_DESC02` varchar(30) NOT NULL,
  `PRODUCT_DESC03` varchar(30) NOT NULL,
  `PRODUCT_PART` varchar(30) DEFAULT NULL,
  `CERT_DATE` varchar(30) DEFAULT NULL,
  `CERTIFY` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `PRODUCTS`
--

INSERT INTO `PRODUCTS` (`NO`, `PRODUCT_CODE`, `CAR`, `LOCATION`, `COMPANY`, `PRODUCT_NAME`, `PRODUCT_BARCODE`, `BARCODE_NO`, `BARCODE_REV`, `PRODUCT_CODE_NAME`, `PRODUCT_PART01`, `PRODUCT_FULLNAME`, `PRODUCT_DESC01`, `PRODUCT_DESC02`, `PRODUCT_DESC03`, `PRODUCT_PART`, `CERT_DATE`, `CERTIFY`) VALUES
(1, 'KAAL230007K', 'VF33', 'VN', 'VINFAST', 'DAB', '0', '0', '0', 'DAB FOLDING [VF33/VN]', 'FOLDING', 'DAB FOLDING [VF33/VN]', 'VF33 VN', '[VF33/VN]', 'VF33 DAB VN', 'DAB', '2024-02-20 오전 12:00:00', 1),
(2, 'KAAL230007K-1', 'VF34', 'VN', 'VINFAST', 'DAB', 'KAAL230090K01', 'KAAL230090K', '01', 'DAB FOLDING [VF34/VN]', 'FOLDING', 'DAB FOLDING [VF34/VN]', 'VF34 VN', '[VF34/VN]', 'VF34 DAB VN', 'DAB', '2024-03-15 오전 12:00:00', 1),
(3, 'KAAL230011K', 'VF33', 'EU', 'VINFAST', 'DAB', 'KAAL230110K 00', 'KAAL230110K', '00', 'DAB FOLDING [VF33/EU]', 'FOLDING', 'DAB FOLDING [VF33/EU]', 'VF33 EU', '[VF33/EU]', 'VF33 DAB EU', 'DAB', '2024-03-15 오전 12:00:00', 1),
(4, 'KAAL230020K', 'VF35', 'VN&EU', 'VINFAST', 'DAB', 'KAAL230010K00', 'KAAL230010K', '00', 'DAB FOLDING [VF35/VN&EU]', 'FOLDING', 'DAB FOLDING [VF35/VN&EU]', 'VF35 VN&EU', '[VF35/VN&EU]', 'VF35 DAB VN&EU', 'DAB', '2024-07-05 오전 12:00:00', 1),
(5, 'KAAL230060K', 'VF35', 'US', 'VINFAST', 'DAB', 'KAAR230000K 00', 'KAAR230000K', '00', 'DAB FOLDING [VF35/US]', 'FOLDING', 'DAB FOLDING [VF35/US]', 'VF35 US', '[VF35/US]', 'VF35 DAB US', 'DAB', '2024-07-06 오전 12:00:00', 1),
(6, 'KAAL230080K', 'LD DAB', 'DAB', 'VINFAST', 'DAB', 'KAAL230080K 01', 'KAAL230080K', '01', 'DAB FOLDING [LD]', 'FOLDING', 'DAB FOLDING [LD]', 'LD DAB', '[LD]', 'LD DAB', 'DAB', '2024-03-15 오전 12:00:00', 1),
(7, 'KABL230000K', 'VF35', 'US', 'VINFAST', 'PAB', 'KABL230050C 00', 'KABL230050C', '00', 'PAB FOLDING [VF35/US]', 'FOLDING', 'PAB FOLDING [VF35/US]', 'VF35 US', '[VF35/US]', 'VF35 PAB US', 'PAB', '2024-07-11 오전 12:00:00', 1),
(8, 'KABL230080K', 'VF33', 'VN&EU', 'VINFAST', 'PAB', '0', '0', '0', 'PAB FOLDING [VF33/VN&EU]', 'FOLDING', 'PAB FOLDING [VF33/VN&EU]', 'VF33 VN&EU', '[VF33/VN&EU]', 'VF33 PAB VN&EU', 'PAB', '2024-02-16 오전 12:00:00', 1),
(9, 'KABL230080K-1', 'VF33', 'VN&EU', 'VINFAST', 'PAB', 'KABL230011K 01', 'KABL230011K', '01', 'PAB FOLDING [VF33/VN&EU]', 'FOLDING', 'PAB FOLDING [VF33/VN&EU]', 'VF33 VN&EU', '[VF33/VN&EU]', 'VF33 PAB VN&EU', 'PAB', '2024-07-09 오전 12:00:00', 1),
(10, 'KACL230090K', 'VF33', 'FRT-CTR', 'VINFAST', 'SAB', 'KACL230090K 00', 'KACL230090K', '00', 'SAB CUSHION [VF33/FRT/CTR]', 'CUSHION', 'SAB CUSHION [VF33/FRT/CTR]', 'VF33 FRT-CTR', '[VF33/FRT/CTR]', 'VF33 FRT-CTR', 'SAB', '2024-03-13 오전 12:00:00', 1),
(11, 'KACL231040K', 'VF33', 'FRT-LH', 'VINFAST', 'SAB', 'KACL231040K 01', 'KACL231040K', '01', 'SAB CUSHION [VF33/FRT/LH/70]', 'CUSHION', 'SAB CUSHION [VF33/FRT/LH/70]', 'VF33 FRT-LH', '[VF33/FRT/LH/70]', 'VF33 FRT-LH', 'SAB', '2024-03-07 오전 12:00:00', 1),
(12, 'KACL231040K-2', 'VF34', 'FR-LH 75mm', 'VINFAST', 'SAB', 'KACL231040K 02', 'KACL231040K', '02', 'SAB CUSHION [VF34/FRT/LH/75]', 'CUSHION', 'SAB CUSHION [VF34/FRT/LH/75]', 'VF34 FR-LH 75mm', '[VF34/FRT/LH/75]', 'VF34 FR-LH 75mm', 'SAB', '2024-03-12 오전 12:00:00', 1),
(13, 'KACL231050K', 'VF33', 'FRT-RH', 'VINFAST', 'SAB', 'KACL231050K 01', 'KACL231050K', '01', 'SAB CUSHION [VF33/FRT/RH/70]', 'CUSHION', 'SAB CUSHION [VF33/FRT/RH/70]', 'VF33 FRT-RH', '[VF33/FRT/RH/70]', 'VF33 FRT-RH', 'SAB', '2024-02-26 오전 12:00:00', 1),
(14, 'KACL231050K-2', 'VF34', 'FR-RH 75mm', 'VINFAST', 'SAB', 'KACL231050K 02', 'KACL231050K', '02', 'SAB CUSHION [VF34/FRT/RH/75]', 'CUSHION', 'SAB CUSHION [VF34/FRT/RH/75]', 'VF34 FR-RH 75mm', '[VF34/FRT/RH/75]', 'VF34 FR-RH 75mm', 'SAB', '2024-03-14 오전 12:00:00', 1),
(15, 'KACL360010K', 'VF33', 'CeAB', 'VINFAST', 'PROTECTOR', '0', '0', '0', 'PROTECTOR [VF33/CeAB]', 'PROTECTOR', 'PROTECTOR [VF33/CeAB]', 'VF33 CeAB', '[VF33/CeAB]', 'VF33 CeAB', 'PROTECTOR', '2024-03-13 오전 12:00:00', 1),
(16, 'KADL230060K', 'VF33', 'CAB-LH', 'VINFAST', 'CAB', 'KADL230060K 00', 'KADL230060K', '00', 'CAB CUSHION [VF33/VN&EU/LH]', 'CUSHION', 'CAB CUSHION [VF33/VN&EU/LH]', 'VF33 CAB-LH', '[VF33/VN&EU/LH]', 'VF33 CAB-LH', 'CAB', '2024-02-15 오전 12:00:00', 1),
(17, 'KADL230070K', 'VF33', 'CAB-RH', 'VINFAST', 'CAB', 'KADL230070K 00', 'KADL230070K', '00', 'CAB CUSHION [VF33/VN&EU/RH]', 'CUSHION', 'CAB CUSHION [VF33/VN&EU/RH]', 'VF33 CAB-RH', '[VF33/VN&EU/RH]', 'VF33 CAB-RH', 'CAB', '2024-02-15 오전 12:00:00', 1),
(18, 'KAEL230041K', 'VF33', 'KAB', 'VINFAST', 'KAB', 'KAEL230041K 00', 'KAEL230041K', '00', 'KAB CUSHION [VF33]', 'CUSHION', 'KAB CUSHION [VF33]', 'VF33 KAB', '[VF33]', 'VF33 KAB', 'KAB', '2024-02-20 오전 12:00:00', 1),
(19, 'KAEL230041K-1', 'VF34', 'KAB', 'VINFAST', 'KAB', 'KAEL230041K 01', 'KAEL230041K', '01', 'KAB CUSHION [VF34]', 'CUSHION', 'KAB CUSHION [VF34]', 'VF34 KAB', '[VF34]', 'VF34 KAB', 'KAB', '2024-03-15 오전 12:00:00', 1),
(20, 'KABL230000K', 'VF35', 'US', 'VINFAST', 'PAB', 'KAAR230000K 00', 'KAAR230000K', '00', 'PAB FOLDING [VF35/US]', 'FOLDING', 'PAB FOLDING [VF35/US]', 'VF35/US PAB', '[VF35/US]', 'VF35/US PAB ', 'PAB', '2024-07-11 오전 12:00:00', 1),
(21, 'KABL230010K', 'VF35', 'VN&EU', 'VINFAST', 'PAB', 'KABL230010K 02', 'KABL230010K', '02', 'PAB FOLDING [VF35/VN&EU]', 'FOLDING', 'PAB FOLDING [VF35/VN&EU]', 'VF35/VN&EU PAB', '[VF35/VN&EU]', 'VF35/VN&EU PAB ', 'PAB', '2024-07-25 오전 12:00:00', 1);

-- --------------------------------------------------------

--
-- Stand-in structure for view `PRODUCTS_INVENTORY`
-- (See below for the actual view)
--
CREATE TABLE `PRODUCTS_INVENTORY` (
`NO` int(11)
,`PRODUCT_CODE` varchar(50)
,`CAR` varchar(30)
,`LOCATION` varchar(30)
,`PRODUCT_NAME` varchar(50)
,`PRODUCT_FULLNAME` varchar(50)
);

-- --------------------------------------------------------

--
-- 테이블 구조 `STOCK`
--

CREATE TABLE `STOCK` (
  `NO` int(11) NOT NULL,
  `PRODUCT_NO` int(10) NOT NULL,
  `PRODUCT_CODE` varchar(30) NOT NULL,
  `PRODUCT_FULLNAME` varchar(50) DEFAULT NULL,
  `COUNT` int(11) DEFAULT NULL,
  `DATE` date DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `STOCK`
--

INSERT INTO `STOCK` (`NO`, `PRODUCT_NO`, `PRODUCT_CODE`, `PRODUCT_FULLNAME`, `COUNT`, `DATE`) VALUES
(1, 1, 'KAAL230007K', 'DAB FOLDING [VF33/VN]', 200, '2024-08-05'),
(2, 2, 'KAAL230007K-1', 'DAB FOLDING [VF34/VN]', 200, '2024-08-05'),
(3, 3, 'KAAL230011K', 'DAB FOLDING [VF33/EU]', 200, '2024-08-05'),
(4, 4, 'KAAL230020K', 'DAB FOLDING [VF35/VN&EU]', 200, '2024-08-06'),
(5, 5, 'KAAL230060K', 'DAB FOLDING [VF35/US]', 200, '2024-08-07'),
(6, 6, 'KAAL230080K', 'DAB FOLDING [LD]', 200, '2024-08-07'),
(7, 8, 'KABL230080K', 'PAB FOLDING [VF33/VN&EU]', 200, '2024-08-07'),
(8, 10, 'KACL230090K', 'SAB CUSHION [VF33/FRT/CTR]', 1, '2024-08-07'),
(9, 10, 'KACL230090K', 'SAB CUSHION [VF33/FRT/CTR]', 1, '2024-08-08'),
(10, 10, 'KACL230090K', 'SAB CUSHION [VF33/FRT/CTR]', 100, '2024-08-09'),
(11, 13, 'KACL231050K', 'SAB CUSHION [VF33/FRT/RH/70]', 100, '2024-08-09'),
(12, 13, 'KACL231050K', 'SAB CUSHION [VF33/FRT/RH/70]', 100, '2024-08-09'),
(13, 13, 'KACL231050K', 'SAB CUSHION [VF33/FRT/RH/70]', 100, '2024-08-09'),
(14, 14, 'KACL231050K-2', 'SAB CUSHION [VF34/FRT/RH/75]', 100, '2024-08-10'),
(15, 7, 'KABL230000K', 'PAB FOLDING [VF35/US]', 100, '2024-08-11'),
(16, 8, 'KABL230080K', 'PAB FOLDING [VF33/VN&EU]', 200, '2024-08-12'),
(17, 7, 'KABL230000K', 'PAB FOLDING [VF35/US]', 150, '2024-08-12'),
(18, 7, 'KABL230000K', 'PAB FOLDING [VF35/US]', 150, '2024-08-13'),
(19, 8, 'KABL230080K', 'PAB FOLDING [VF33/VN&EU]', 160, '2024-08-14'),
(20, 10, 'KACL230090K', 'SAB CUSHION [VF33/FRT/CTR]', 160, '2024-08-14');

--
-- 트리거 `STOCK`
--
DELIMITER $$
CREATE TRIGGER `after_stock_delete` AFTER DELETE ON `STOCK` FOR EACH ROW BEGIN
  -- INVENTORY 테이블에 해당 PRODUCT_NO가 있는지 확인
  IF EXISTS (SELECT * FROM INVENTORY WHERE PRODUCT_NO = OLD.PRODUCT_NO) THEN
    -- SUM_COUNT 값을 감소시킴
    UPDATE INVENTORY
    SET SUM_COUNT = SUM_COUNT - OLD.COUNT, DATE = current_timestamp()
    WHERE PRODUCT_NO = OLD.PRODUCT_NO;
    
    -- SUM_COUNT가 0보다 작아지면 해당 항목을 삭제
    DELETE FROM INVENTORY
    WHERE PRODUCT_NO = OLD.PRODUCT_NO AND SUM_COUNT <= 0;
  END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `after_stock_insert` AFTER INSERT ON `STOCK` FOR EACH ROW BEGIN
  -- INVENTORY 테이블에 해당 PRODUCT_NO가 있는지 확인
  IF EXISTS (SELECT * FROM INVENTORY WHERE PRODUCT_NO = NEW.PRODUCT_NO) THEN
    -- 존재하면 SUM_COUNT 값을 증가시킴
    UPDATE INVENTORY
    SET SUM_COUNT = SUM_COUNT + NEW.COUNT, DATE = current_timestamp()
    WHERE PRODUCT_NO = NEW.PRODUCT_NO;
  ELSE
    -- 존재하지 않으면 새로운 항목을 삽입
    INSERT INTO INVENTORY (PRODUCT_NO, SUM_COUNT, DATE)
    VALUES (NEW.PRODUCT_NO, NEW.COUNT, current_timestamp());
  END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- 뷰 구조 `PRODUCTS_INVENTORY`
--
DROP TABLE IF EXISTS `PRODUCTS_INVENTORY`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `PRODUCTS_INVENTORY`  AS SELECT `PRODUCTS`.`NO` AS `NO`, `PRODUCTS`.`PRODUCT_CODE` AS `PRODUCT_CODE`, `PRODUCTS`.`CAR` AS `CAR`, `PRODUCTS`.`LOCATION` AS `LOCATION`, `PRODUCTS`.`PRODUCT_NAME` AS `PRODUCT_NAME`, `PRODUCTS`.`PRODUCT_FULLNAME` AS `PRODUCT_FULLNAME` FROM `PRODUCTS` ;

--
-- 덤프된 테이블의 인덱스
--

--
-- 테이블의 인덱스 `BARCODE_COUNT`
--
ALTER TABLE `BARCODE_COUNT`
  ADD PRIMARY KEY (`NO`),
  ADD UNIQUE KEY `PRODUCT_BARCODE` (`PRODUCT_CODE`),
  ADD KEY `PRODUCT_CODE` (`PRODUCT_CODE`);

--
-- 테이블의 인덱스 `DELIVERY`
--
ALTER TABLE `DELIVERY`
  ADD PRIMARY KEY (`NO`);

--
-- 테이블의 인덱스 `INVENTORY`
--
ALTER TABLE `INVENTORY`
  ADD PRIMARY KEY (`NO`),
  ADD UNIQUE KEY `PRODUCT_NO` (`PRODUCT_NO`);

--
-- 테이블의 인덱스 `PRODUCTS`
--
ALTER TABLE `PRODUCTS`
  ADD PRIMARY KEY (`NO`);

--
-- 테이블의 인덱스 `STOCK`
--
ALTER TABLE `STOCK`
  ADD PRIMARY KEY (`NO`);

--
-- 덤프된 테이블의 AUTO_INCREMENT
--

--
-- 테이블의 AUTO_INCREMENT `BARCODE_COUNT`
--
ALTER TABLE `BARCODE_COUNT`
  MODIFY `NO` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=54;

--
-- 테이블의 AUTO_INCREMENT `DELIVERY`
--
ALTER TABLE `DELIVERY`
  MODIFY `NO` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- 테이블의 AUTO_INCREMENT `INVENTORY`
--
ALTER TABLE `INVENTORY`
  MODIFY `NO` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=19;

--
-- 테이블의 AUTO_INCREMENT `PRODUCTS`
--
ALTER TABLE `PRODUCTS`
  MODIFY `NO` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- 테이블의 AUTO_INCREMENT `STOCK`
--
ALTER TABLE `STOCK`
  MODIFY `NO` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=21;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
